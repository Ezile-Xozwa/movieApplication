package za.ac.cput;

//import org.junit.Test;
import org.junit.jupiter.api.Test;
import za.ac.cput.domain.*;
import za.ac.cput.util.*;


import java.time.LocalDate;
import java.time.LocalDateTime;

//import static junit.framework.Assert.*;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.*;

public class SnackOrderFactoryTest {

    @Test
    public void createSnackOrder() {
        LocalDateTime orderTime = LocalDateTime.of(2025, 5, 18, 12, 15);
        LocalDate date = LocalDate.of(2025, 5, 18);
        LocalDateTime startTime = LocalDateTime.of(2025, 5, 18, 11, 30);
        LocalDate birth = LocalDate.of(2025, 3, 27);

        Home home = new Home.Builder()
                .setMovieId(HomeGenericHelper.generateID())
                .setTitle("Inception")
                .setGenre("Sci-Fi")
                .setDuration("2h5m")
                .build();
        User user = new User.Builder()
                .setUserId(UserGenericHelper.generateID())
                .setName("Mbali")
                .setSurname("Banda")
                .setPhoneNumber("")
                .setDateOfBirth(birth)
                .setGender("Female")
                .build();
        Showtime showtime = new Showtime.Builder()
                .setShowtimeId(ShowtimeGenericHelper.generateID())
                .setMovie("Inception")
                .setDate(date)
                .setStartTime(startTime)
                .build();

            Booking booking = new Booking.Builder()
                .setBookingId(SnackOrderGenericHelper.generateID())
               // .setMovie("Inception")
                .setUser(user)
                .setShowtime(showtime)
                .build();

            SnackOrder snackOrder = new SnackOrder.Builder()
                    .setSnackOrderId("SO001")
                    .setBookingId("B001")
                    .setSnackId("SN001")
                    .setQuantity(2)
                    .setTotalPrice(80.00)
                    .setOrderTime(LocalDateTime.now().minusMinutes(10))
                    .setSpecialInstructions("No ice")
                    .build();

            System.out.println(snackOrder);
            assertNotNull(snackOrder);

        }
    }

